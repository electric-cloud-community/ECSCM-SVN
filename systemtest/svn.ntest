# -*-Perl-*-

# svn.ntest -
#
# Exercise basic components of ECSCM-SVN plugin
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;

# read in setup and tests that are common to all ECSCM plugin 
# system tests
my $commonFile =  "$::gTestFileDir/../../ECSCM/systemtest/ntest.common";
open F, "< $commonFile";
my $code = do { local $/; <F> };
close F;
eval  $code ;

# Run test procedure $name in project $project with specified actual parameters
sub runProcedure {
    my ($project, $name, $parameters_ref) = @_;

    my @actualParameters = ();
    
    while ( my ($key, $val) = each %{$parameters_ref} ) {
        push (@actualParameters, {actualParameterName => $key, value => $val});
    }
    
    # Run the procedure
    my $xpath = $::N->runProcedure(
        $project,
        {
            procedureName   => $name,
            pollInterval    => 1,
            timeout         => 600,
            actualParameter => [@actualParameters]
        }
    );
    log_xml(__LINE__, $xpath, "runProcedure");

    return $xpath;
}

ntest "check-checkout-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","CheckoutCode");
    assertOK($xpath,"get steps");
    assertEq("checkoutMethod", $xpath->findvalue("//step[1]/stepName"), "step 1 is checkoutMethod");
};

ntest "check-getSCMTag-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","getSCMTag");
    assertOK($xpath, "get steps");
    assertEq("tagMethod", $xpath->findvalue("//step[1]/stepName"), "step 1 is getSCMTag");

};

ntest "check-Preflight-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","Preflight");
    assertOK($xpath, "get steps");
    assertEq("preflight", $xpath->findvalue("//step[1]/stepName"), "step 1 is preflight");

};

ntest "check-config code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Cfg");
    assertOK($xpath,"get cfg property");
    assertNe("", $xpath->findvalue("//value"), "Config Code");
};

ntest "check-driver code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Driver");
    assertOK($xpath,"get driver property");
};

# Tests specific or customized to this SCM
ntest "setup-import test project", {}, sub {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/import.xml",
               path  => "/projects/ECSCM Tests",
               force => 1
             } ), "import test project");
    assertOK($::N->getProcedure("ECSCM Tests", "svntest"),"svntest procedure exists");
};

ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "test" }, 
            { actualParameterName => 'desc', value => "SVN config" }, 
            { actualParameterName => 'credential', value => "test" }, 
          ],
          credential => [ 
            { credentialName => 'test', userName => "pluginsdev\@electric-cloud.com", password => "2H9Dm4XssE", },
          ],
        });

    assertOK($xpath, "run create configuration procedure");
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertDef($xpath, "runProcedure finished without a timeout");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::ECSCM/scm_cfgs/test/scmPlugin");
    assertEq("ECSCM-SVN",$xpath->findvalue("//value")->string_value,"config type");
    $xpath = $::N->getCredential("$::ECSCM","test");
    assertEq("pluginsdev\@electric-cloud.com",$xpath->findvalue("//userName")->string_value, 'Credential user');
};

ntest "svn_test_externals", {}, sub {
    my $procedureName = "Test Externals";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId outcome: $outcome" );
};

ntest "svn_test_changelog_generation", {}, sub {
    my $procedureName = "Test Changelog Generation";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { revision => 1 });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId outcome: $outcome" );

    $xpath = $::N->getProperties({jobId => $jobId, recurse => 1});

    # Check that changelog contains revision 1
    assertNodeHasPattern($xpath,
        $xpath->findvalue("//property[propertyName='ecscm_changeLogs']"),
        "Revision: 1",
        "changelog contains revision 1");

    assertNotSubstring($xpath->findvalue("//property[propertyName='ecscm_changeLogs']"),
        "Revision: 2",
        "changelog does not contain revision 2");

    # Run procedure again, and check that changelog starts with 2 revision
    $xpath = runProcedure("ECSCM Tests", $procedureName, { revision => 6 });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId outcome: $outcome" );

    $xpath = $::N->getProperties({jobId => $jobId, recurse => 1});

    # Check that changelog starts with rev. 2, not 1
    assertNodeHasPattern($xpath,
        $xpath->findvalue("//property[propertyName='ecscm_changeLogs']"),
        "Revision: 2",
        "changelog contains revision 2");

    assertNotSubstring($xpath->findvalue("//property[propertyName='ecscm_changeLogs']"),
        "Revision: 1",
        "changelog does not contain revision 1");

    # Check that changelog contains revision 6
    assertNodeHasPattern($xpath,
        $xpath->findvalue("//property[propertyName='ecscm_changeLogs']"),
        "Revision: 6",
        "changelog contains revision 6");

};

ntest "run-end to end", {}, sub {
    # run test job
    my $xpath = runProcedure("ECSCM Tests", "svntest", {resource => "default"});
    
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertOK($xpath, "runProcedure finished");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # Did the job run error free?
    assert('', 'eq', errors($xpath), "runProcedure returned error-free");

    # examine log files
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    return if assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found a logfile name");

    # Get the name of the log file for checkoutCode
    my $logFileName = $ws . "/"
        . $xpath->findvalue("//jobStep[stepName='checkoutMethod']/calledProcedure/jobStep[stepName='runMethod']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);
    return if assertNe($data, '', "Read data");

    # check that files were really checked out
    my $exists = (-e "$ws/svn-src/file1");
    assertEq(1,$exists, "SCM Checked out file1");

    writeFile("$::gCurrentTestDir/checkoutCode.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    $data =~ '.*Checked out revision (.*)\.';
    my $change = $1;
    assertTrue($change && int($change) > 0,'checkoutCode - valid changelist found in log');

    # Get the name of the log file for preFlight
    $logFileName = $ws . "/"
        . $xpath->findvalue("//jobStep[stepName='tagMethod']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    # Read the log file and verify its contents.
    $data = readFile($logFileName);
    $data =~ '.*getSCMTag returned ([0-9]*)';
    $change = $1;
    assertTrue($change && int($change) > 0 ,'getSCMTag - valid changelist found in log');
    writeFile("$::gCurrentTestDir/getSCMTag.log",$data);
};

ntest "run-checkout-multipleRepo", {}, sub {
    # run test job
    my $xpath = runProcedure("ECSCM Tests", "svn_checkout",
                            {resource => "default",
                             repository => "https://pl6.projectlocker.com/ElectricCloudSVN/scmtest/svn/dir1|https://pl6.projectlocker.com/ElectricCloudSVN/scmtest2/svn/dir2",
                             revision => "6|2",
                             destination => "svn-src"});

    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertOK($xpath, "runProcedure finished");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # Did the job run error free?
    assert('', 'eq', errors($xpath), "runProcedure returned error-free");

    # examine log files
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    return if assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found a logfile name");

    # Get the name of the log file for checkoutCode
    my $logFileName = $ws . "/"
        . $xpath->findvalue("//jobStep[stepName='checkoutMethod']/calledProcedure/jobStep[stepName='runMethod']/logFileName");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);
    return if assertNe($data, '', "Read data");

    # check that files were really checked out
    my $exists = (-e "$ws/svn-src/dir1/file2.txt");
    assertEq(1,$exists, "SCM Checked out file2");

    # check that files from 2-nd repository
    # were really checked out
    $exists = (-e "$ws/svn-src/dir2/file3.txt");
    assertEq(1,$exists, "SCM Checked out file3");

    # check that file dir2/test.txt (comitted at rev 4) from 2-nd repository
    # not checked out (restricted by revision)
    $exists = (-e "$ws/svn-src/dir2/test.txt");
    assertNe(1, $exists, "SCM does not check out test");
};

ntest "run-preflight", {linuxOnly =>1}, sub {
    my $procedureName = "svn_preflight_client";
    my $config_param  = "/myProject/svn-1.preflight";
    my $src_dir       = "src";

    # The agent needs to know the server name, but gTarget is probably
    # "localhost" which does us no good.  Find the real name of the
    # local host and pass it to the agent
    my $serverName = "$::gTarget";
    if ( "$::gTarget" eq "localhost" ) {
        $serverName = hostname();
    }

    # Run test job
    my $xpath = runProcedure("ECSCM Tests", $procedureName, {
        resource => "default",
        cmdr_server => $serverName,
        test => $config_param
    });
    
    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );

    # Abort if job did not finish
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Did the job run error free?
    assert('', 'eq', errors($xpath), "runProcedure returned error-free");

    # Examine log files
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    return if assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found the workspace name");

    # Get the name of the log file for ecclientpreflight
    my $logFileName = $xpath->findvalue(
        "//jobStep[stepName='svn_preflight_client']/logFileName");
        #"//jobStep[stepName='ecclientpreflight']/logFileName");
    return if assertNe($logFileName, '', "Found the logfile name");
    $logFileName = "$ws/$logFileName";

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    my $agentJobId;
    if($data =~ 'JOB ID: ([0-9a-zA-Z-]*)'){
        $agentJobId = $1;
    }
    
    assertGoodId($agentJobId, 'agent jobid found in log' );
    
    writeFile( "$::gCurrentTestDir/clientpreflight.log",
        "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n" );

    $::N->waitForJob( $agentJobId, 60 );

    # now get the details of the agent job
    $xpath = $::N->getJobDetails($agentJobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    return if assertEq('', errors($xpath), "getJobDetails returned error-free");

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    return if assertNe($ws, '', "Found a logfile name");

    # Get the name of the log file for agent
    my $agentLogFileName =
      $ws . "/"
      . $xpath->findvalue(
"//jobStep[stepName='preflight']/calledProcedure/jobStep[stepName='runMethod']/logFileName"
      );
    $data = readFile($agentLogFileName);
    return if assertNe($data, '', "Read data");

    # Modified file
    my $exists = ( -e "$ws/$src_dir/file1" ) || 0;
    assertEq( 1, $exists, "SCM Checked out file1" );
    my $content = `cat $ws/$src_dir/file1`;
    $content =~ s/\s*$//; #chomp $content;  # chomp doesn't delete \r
    assertEq( "preflight", $content, "SCM Modified file1" );

    # Deleted file
    $exists = ( -e "$ws/$src_dir/file2" ) || 0;
    assertEq( 0, $exists, "SCM Deleted file2" );

    # Added file
    $exists = ( -e "$ws/$src_dir/file10" ) || 0;
    assertEq( 1, $exists, "SCM Created file10" );
    writeFile( "$::gCurrentTestDir/agentpreflight.log",
        "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n" );

};

ntest "svn_tag_config_blank", {}, sub {

    my $procedureName = "svn tag - config - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Could not find configuration default", $data, "runMethod");
};

ntest "svn_tag_config_invalid", {}, sub {

    my $procedureName = "svn tag - config - invalid";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Could not find configuration bogus", $data, "runMethod");
};

ntest "svn_tag_dest_blank", {}, sub {

    my $procedureName = "svn tag - dest - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    #$ws .= "/$agentLogFileName";
    #my $data = readFile("$ws");
    
};

ntest "svn_tag_repository_blank", {}, sub {

    my $procedureName = "svn tag - repository - blank";
    my $stepName      = "svn tag - repository - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished

    #assertOK( $xpath, "runProcedure finished" );
    #   - expecting an error.

    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId status: error" );

    # Get the error code and message
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

    # Assertions
    assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
};

ntest "svn_tag_repository_invalid", {}, sub {

    my $procedureName = "svn tag - repository - invalid";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Unable to open", $data, "runMethod");
    assertSubstring("BOGUS", $data, "runMethod");
};

ntest "svn_test_config_blank", {}, sub {

    my $procedureName = "svn test - config - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Could not find configuration default", $data, "runMethod");
};

ntest "svn_test_config_invalid", {}, sub {

    my $procedureName = "svn test - config - invalid";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Could not find configuration bogus", $data, "runMethod");
};

ntest "svn_test_dest_blank", {}, sub {

    my $procedureName = "svn test - dest - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("checkoutCode returned", $data, "runMethod");
    assertSubstring("file1", $data, "runMethod");
};

ntest "svn_test_SubversionRevision_blank", {}, sub {

    my $procedureName = "svn test - SubversionRevision - blank";
    my $stepName      = "svn test - SubversionRevision - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished

    #assertOK( $xpath, "runProcedure finished" );
    #   - expecting an error.

    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'success', $outcome, "job $jobId status: error" );

    # Get the error code and message
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");

    # Assertions
    assertOK( $xpath, "getJobDetails" );
};

ntest "svn_test_SubversionRevision_invalid", {}, sub {

    my $procedureName = "svn test - SubversionRevision - invalid";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("No such revision", $data, "runMethod");
};


ntest "svn_test_SubversionUrl_blank", {}, sub {

    my $procedureName = "svn test - SubversionUrl - blank";
    my $stepName      = "svn test - SubversionUrl - blank";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished

    #assertOK( $xpath, "runProcedure finished" );
    #   - expecting an error.

    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML

    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId status: error" );

    # Get the error code and message
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    my $errorCode = $xpath->findvalue(qq{//jobStep[stepName="$stepName"]/errorCode});

    # Assertions
    assertSubstring("FORMAL_PARAMETER_ERROR", $errorCode, "checkoutCode");
};

ntest "svn_test_SubversionUrl_invalid", {}, sub {

    my $procedureName = "svn test - SubversionUrl - invalid";

    # Run the procedure
    my $xpath = runProcedure("ECSCM Tests", $procedureName, { resource => "default" });

    # Make sure it finished
    assertOK( $xpath, "runProcedure finished" );
    my $jobId  = $xpath->findvalue("//jobId");
    my $status = $xpath->findvalue("//status");
    assertTrue($jobId && $jobId ne "",'valid job id');
    assertEq( 'completed', $status, "job $jobId complete" );
    if ( $status ne "completed" ) {
        assertOK( $::N->abortJob( $jobId, { force => 1 } ) );
    }

    # Check the outcome
    my $outcome = $xpath->findvalue("//outcome");
    assertEq( 'error', $outcome, "job $jobId outcome: $outcome" );

    # Get the step log
    $xpath = $::N->getJobDetails($jobId);
    log_xml(__LINE__, $xpath, "getJobDetails");
    assertOK( $xpath, "getJobDetails" );
    #print "\n\n\n", $xpath->findnodes_as_string("/*"), "\n\n"; # Print the XML
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if ( !isWindows() ) {
        $ws = $xpath->findvalue("//workspace/unix");
    }
    my $agentLogFileName = $xpath->findvalue(
        qq{//calledProcedure/jobStep[stepName="runMethod"]/logFileName}
        );
    assertTrue( "$agentLogFileName", "Step-log name");
    $ws .= "/$agentLogFileName";
    my $data = readFile("$ws");

    # Assertions
    assertSubstring("Unable to open an ra_local session to URL", $data, "runMethod");
};
